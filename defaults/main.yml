---
# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# ------------------------
#   Global configuration
# ------------------------

# .. envvar:: ulogd__enabled
#
# Enable or disable management of ``ulogd`` configuration files.
ulogd__enabled: True

# .. envvar:: ulogd__base_packages
# List of base APT packages to install.
ulogd__base_packages: ['ulogd2']

# .. envvar:: ulogd__packages
# List of additional APT packages to install with ``ulogd``.
ulogd__packages: []

# .. envvar:: ulogd__logile_status_messages
# The main logfile, where ulogd reports any errors, warnings and other
# unexpected conditions. Apart from a regular filename, the following special
# values can be used; ``syslog'' to log via the unix syslog(3) mechanism.
# ``stdout'' to log to stdout.
ulogd__logfile_status_messages: 'syslog'

# .. envvar:: ulogd__loglevel
# This specifies, how verbose the logging to logfile is. Currently defined
# loglevels are: 1=debug information, 3=informational messages, 5=noticable
# exceptional conditions, 7=error conditions, 8=fatal errors, program abort.
ulogd__loglevel: '3'

# ------------------------------
#   Logging configuration
# ------------------------------

# Plugins. In the config file, this option is followed by a filename of
# a ulogd plugin, which ulogd should load upon initialization. This
# option may appear more than once.
#
# In DebOps plugins are split into several lists. First group use short naming,
# please consult listing of ``{{ ulogd__plugins_dir }}`` directory
# or its equivalent in your host architecture to understand the methodology.
# Fullpath lists provide full path to each plugin.

# .. envvar:: ulogd__base_plugins
# List of plugins turned on by default in the DebOps role. These are really essential
# ones and it's hard to build a useful stack without them.

# .. envvar:: ulogd__plugins_dir
# Directory where plugins reside
ulogd__plugins_dir: '/usr/lib/x86_64-linux-gnu/ulogd'

# ulogd__base_plugins: [ 'inppkt_NFLOG', 'raw2packet_BASE', 'filter_IFINDEX', 'filter_IP2STR', 'filter_PRINTPKT', 'output_LOGEMU' ]
ulogd__base_plugins: [ 'inppkt_NFLOG', 'raw2packet_BASE', 'filter_IFINDEX', 'filter_IP2STR', 'filter_PRINTPKT', 'output_LOGEMU' ] 

# .. envvar:: ulogd__plugins
# List of additional plugins you or dependent role would like to use, defined for all hosts in Ansible inventory.
ulogd__plugins: []

# .. envvar:: ulogd__group_plugins
# List of additional plugins which could be defined for a group of hosts in Ansible inventory. 
ulogd__group_plugins: []

# .. envvar:: ulogd__host_plugins
# List of additional plugins which could be defined for a specific host in Ansible inventory. 
ulogd__host_plugins: []

# .. envvar:: ulogd__dependent_plugins
# List of additional plugins which could be defined by other Ansible roles as a dependency.
ulogd__dependent_plugins: []

# .. envvar:: ulogd__fullpath_plugins
# List of additional plugins with full path definitions. You may need it of you deploy external plugins.
ulogd__fullpath_plugins: []

# .. envvar:: ulogd__fullpath_group_plugins
# List of additional plugins which could be defined for a group of hosts in Ansible inventory. 
ulogd__group_fullpath_plugins: []

# .. envvar:: ulogd__fullpath_host_plugins
# List of additional plugins which could be defined for a specific host in Ansible inventory. 
ulogd__host_fullpath_plugins: []

# .. envvar:: ulogd__fullpath_dependent_plugins
# List of additional plugins which could be defined by other Ansible roles as a dependency.
ulogd__dependent_fullpath_plugins: []

# .. envvar:: ulogd__stacks
# Stack. In the config file this option is followed by a list of plugin
# instances which will start with an input plugin, contains optional filtering
# plugin and finish by an output plugin. This option may appear more than once.
#
# In DebOps the stack is defined with YAML syntax. After defining a stack, you
# are able to extend it with options which configure that stack. 
#
# ATTENTION: by limitation of this role, names of plugin instances can not start with a capital letter or a number!
#
# It's an example use case for defining and configuring two stacks:
#
# ulogd__stack_shorewall:
#   - log1: 'BASE'
#     OPTIONS:
#       group: 0
#       netlink_qtimeout: 100
#   - base1: 'BASE'
#   - ifi1: 'IFINDEX'
#   - emu1: 'LOGEMU'
#     OPTIONS:
#       file: '/var/log/ulogg/syslogemu.log'
#       sync: 1
#
# ulogd__stack_ferm:
#   - log2: 'BASE'
#   - ifi2: 'IFINDEX'
#
# ulogd__stacks:
#   - '{{ ulogd__stack_shorewall }}'
#   - '{{ ulogd__stack_ferm }}'
#
# By default stack list includes ``{{ ulogd__stack_logemu }}`` and
# because it uses uncommon ``666`` netgroup, it should not interfere
# with user and other role defined stacks of logging.
#
ulogd__stacks: []

# .. envvar:: ulogd__default_stacks
ulogd__default_stacks: [ '{{ ulogd__stack_logemu }}' ]

# .. envvar:: ulogd__host_stacks
# List of stacks defined for specific hosts in Ansible inventory.
ulogd__host_stacks: []

# .. envvar:: ulogd__group_stacks
# List of stacks defined for specific groups in Ansible inventory.
ulogd__group_stacks: []

# .. envvar:: ulogd__dependent_stacks
# List of stacks defined by other Ansible roles as a dependency.
ulogd__dependent_stacks: []

# .. envvar:: ulogd__stack_logemu
# As default stack uses uncommon ``666`` netgroup, it should not interfere with user
# and other role defined stacks of logging.
ulogd__stack_logemu:
  - log666: 'NFLOG'
    OPTIONS:
      group: 666
      netlink_qtimeout: 100
  - base666: 'BASE'
  - ifi666: 'IFINDEX'
  - ip2str666: 'IP2STR'
  - print666: 'PRINTPKT'
  - emu666: 'LOGEMU'
    OPTIONS:
      file: '/var/log/ulog/syslogemu666.log'
      sync: 1
